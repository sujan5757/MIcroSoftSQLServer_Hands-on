-- Create DATABASE
CREATE DATABASE PROJECT4;

USE PROJECT4;

-- Create COUNTRY table
CREATE TABLE COUNTRY (
    COUNTRY_ID INT NOT NULL,
    COUNTRY_NAME VARCHAR(16),
    COUNTRY_CODE INT,
    PRIMARY KEY (COUNTRY_ID)
);

EXEC sp_columns COUNTRY;

-- Create STATE table
CREATE TABLE STATE (
    STATE_ID INT NOT NULL,
    STATE_NAME VARCHAR(16),
    STATE_CODE INT,
    COUNTRY_ID INT,
    PRIMARY KEY (STATE_ID),
    FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY(COUNTRY_ID)
);

-- Create DISTRICT table
CREATE TABLE DISTRICT (
    DISTRICT_ID INT NOT NULL,
    DISTRICT_NAME VARCHAR(16),
    DISTRICT_CODE INT,
    STATE_ID INT,
    COUNTRY_ID INT,
    PRIMARY KEY (DISTRICT_ID),
    FOREIGN KEY (STATE_ID) REFERENCES STATE(STATE_ID),
    FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY(COUNTRY_ID)
);

-- Create CUSTOMER table
CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT NOT NULL,
    CUSTOMER_NAME VARCHAR(16),
    CUSTOMER_AGE INT,
    CUSTOMER_DOB VARCHAR(16),
    CUSTOMER_ANNI VARCHAR(16),
    CUSTOMER_WALLET INT,
    CUSTOMER_COUNTRY_ID INT,
    CUSTOMER_STATE_ID INT,
    CUSTOMER_DISTRICT_ID INT,
    PRIMARY KEY (CUSTOMER_ID),
    FOREIGN KEY (CUSTOMER_COUNTRY_ID) REFERENCES COUNTRY(COUNTRY_ID),
    FOREIGN KEY (CUSTOMER_STATE_ID) REFERENCES STATE(STATE_ID),
    FOREIGN KEY (CUSTOMER_DISTRICT_ID) REFERENCES DISTRICT(DISTRICT_ID)
);

-- Create MOBILE_TYPE table
CREATE TABLE MOBILE_TYPE (
    MOBILE_TYPE_ID INT NOT NULL,
    MOBILE_TYPE VARCHAR(16),
    PRIMARY KEY (MOBILE_TYPE_ID)
);

-- Create MOBILE table
CREATE TABLE MOBILE (
    MOBILE_ID INT NOT NULL,
    MOBILE_NUMBER VARCHAR(10),
    MOBILE_TYPE_ID INT,
    CUSTOMER_ID INT,
    PRIMARY KEY (MOBILE_ID),
    FOREIGN KEY (MOBILE_TYPE_ID) REFERENCES MOBILE_TYPE(MOBILE_TYPE_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

-- Create EMAIL_TYPE table
CREATE TABLE EMAIL_TYPE (
    EMAIL_TYPE_ID INT NOT NULL,
    EMAIL_TYPE VARCHAR(16),
    PRIMARY KEY (EMAIL_TYPE_ID)
);

-- Create EMAIL table
CREATE TABLE EMAIL (
    EMAIL_ID INT NOT NULL,
    EMAIL VARCHAR(16),
    EMAIL_TYPE INT,
    CUSTOMER_ID INT,
    PRIMARY KEY (EMAIL_ID),
    FOREIGN KEY (EMAIL_TYPE) REFERENCES EMAIL_TYPE(EMAIL_TYPE_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

-- Create PURCHASE_HISTORY table
CREATE TABLE PURCHASE_HISTORY (
    PURCHASE_ID INT NOT NULL,
    CUSTOMER_ID INT,
    DATE_OF_PURCHASE VARCHAR(16),
    NO_OF_ITEMS INT,
    AMOUNT VARCHAR(16),
    DATE_OF_DELIVERY VARCHAR(16),
    ADDRESS_ID INT,
    PRIMARY KEY (PURCHASE_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY (ADDRESS_ID) REFERENCES CUSTOMER_ADDRESS(CUSTOMER_ADDRESS_ID)
);

-- Create ITEMS table
CREATE TABLE ITEMS (
    ITEM_ID INT NOT NULL,
    ITEM_PRICE VARCHAR(16),
    ITEM_STOCK INT,
    ITEM_CATEGORY VARCHAR(16),
    PRIMARY KEY (ITEM_ID)
);

-- Create RECEIVER_ADDRESS table
CREATE TABLE RECEIVER_ADDRESS (
    RECEIVER_ID INT NOT NULL,
    RECEIVER_NAME VARCHAR(16),
    CUSTOMER_ADDRESS_ID INT,
    RECEIVER_MOBILE VARCHAR(16),
    COUNTRY_ID INT,
    PRIMARY KEY (RECEIVER_ID),
    FOREIGN KEY (CUSTOMER_ADDRESS_ID) REFERENCES CUSTOMER_ADDRESS(CUSTOMER_ADDRESS_ID),
    FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY(COUNTRY_ID)
);

-- Create CUSTOMER_ADDRESS_TYPE table
CREATE TABLE ADDRESS_TYPE (
    ADDRESS_TYPE_ID INT NOT NULL,
    ADDRESS_TYPE VARCHAR(16),
    PRIMARY KEY (ADDRESS_TYPE_ID)
);

-- Create CUSTOMER_ADDRESS table
CREATE TABLE CUSTOMER_ADDRESS (
    CUSTOMER_ADDRESS_ID INT NOT NULL,
    CUSTOMER_ADDRESS_TYPE_ID INT,
    CUSTOMER_ID INT,
    CUSTOMER_ADDRESS VARCHAR(16),
    PRIMARY KEY (CUSTOMER_ADDRESS_ID),
    FOREIGN KEY (CUSTOMER_ADDRESS_TYPE_ID) REFERENCES ADDRESS_TYPE(ADDRESS_TYPE_ID),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

-- Create ORDER_ITEMS table to keep track of items in each purchase
CREATE TABLE ORDER_ITEMS (
    ORDER_ITEM_ID INT NOT NULL,
    PURCHASE_ID INT,
    ITEM_ID INT,
    PRIMARY KEY (ORDER_ITEM_ID),
    FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASE_HISTORY(PURCHASE_ID),
    FOREIGN KEY (ITEM_ID) REFERENCES ITEMS(ITEM_ID)
);
 