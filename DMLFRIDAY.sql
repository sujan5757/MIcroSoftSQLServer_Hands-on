--DML QUERIES
--CREATE OPERATION
CREATE DATABASE DML;
USE DML;


--CREATE TABLE
CREATE TABLE EMPPLOYEE(
EMP_ID INT,
EMP_NAME VARCHAR(16),
EMP_SALARY INT
);

--INSERTING VALUES
INSERT INTO EMPLOYEE
VALUES
(101,'GANESH', 1000)
GO

INSERT INTO EMPPLOYEE
VALUES 
(100,'SUJAN',2000);


INSERT INTO EMPPLOYEE
(EMP_ID,EMP_NAME,EMP_SALARY)
VALUES 
(102,'riya',3000),
(103,'nidhi',4000),
(104,'jamsher',5000),
(105,'daniel',6000),
(106,'merlyn',3000),
(107,NULL,5000),
(108,'SRIYA',NULL)
GO
--DROP TABLE

DROP TABLE EMPPLOYEE;

--UPDATE TABLE
UPDATE EMPPLOYEE
SET EMP_NAME='SUJAN'
WHERE EMP_ID =107
GO

UPDATE EMPPLOYEE
SET EMP_SALARY=90000
WHERE EMP_ID=108;

INSERT INTO EMPPLOYEE
VALUES
(109,NULL,38990);

INSERT INTO EMPPLOYEE
VALUES
(109,'DERALA',NULL);

--UPDATING MULTIPLE VALUES

UPDATE EMPPLOYEE
SET EMP_SALARY=6001,
    EMP_NAME='GYT'
WHERE EMP_ID=109
GO

--OUTPUT 
DROP TABLE DEPARTMENT;

CREATE TABLE DEPARTMENT(
D_ID INT PRIMARY KEY,
D_NAME VARCHAR(16));

INSERT INTO DEPARTMENT
VALUES
(1,'DEVELOPMENT'),
(2,'HR'),
(3,'QA')


ALTER TABLE EMPPLOYEE
ADD D_ID INTEGER;

ALTER TABLE EMPPLOYEE
ADD CONSTRAINT FK_D_ID
FOREIGN KEY (D_ID) REFERENCES DEPARTMENT(D_ID)
GO

UPDATE EMPPLOYEE SET D_ID=1 WHERE EMP_ID=102;
UPDATE EMPPLOYEE SET D_ID=2 WHERE EMP_ID=103;
UPDATE EMPPLOYEE SET D_ID=3 WHERE EMP_ID=104;
UPDATE EMPPLOYEE SET D_ID=1 WHERE EMP_ID=105;
UPDATE EMPPLOYEE SET D_ID=2 WHERE EMP_ID=106;


---UPDATING SALARY / NESTED QUERY OR SUB QUERY
UPDATE EMPPLOYEE
SET EMP_SALARY=100
WHERE D_ID =(	SELECT D_ID
			FROM DEPARTMENT
			WHERE D_NAME='HR');

--delete operation
DELETE
FROM EMPPLOYEE
WHERE D_ID=1;
GO

--WANT TO DELETE SET OF EMPLOYEE
DELETE 
FROM EMPPLOYEE
WHERE EMP_SALARY<=3000;
GO

DELETE 
FROM EMPPLOYEE
WHERE DEPARTMENT_ID IS NULL
--WHERE DEPARTMENT_ID =NULL  CAN'T BE DONE
GO

---select operation

SELECT EMP_ID
FROM EMPPLOYEE;

--UPDATING THE COLUMN NAME IN EMPLOYEE TABLE 
EXEC sp_rename 'EMPPLOYEE.EMPPLOYEE_DEP_ID',
				'D_ID'

GO

--ALIAS NAMES MATHOD 1
SELECT
EMP_NAME AS 'NAME OF THE EMPLOYEE',
EMP_SALARY AS 'SALARY OF EMPLOYEE'
FROM EMPPLOYEE
GO

--ALIAS NAMES METHOD 2
SELECT
EMP_NAME  'NAME OF THE EMPLOYEE',
EMP_SALARY AS 'SALARY OF EMPLOYEE'
FROM EMPPLOYEE
GO
SELECT * FROM EMPPLOYEE;
--TO DISPLAY FIRST NAME AND LAST NAME TOGETHRE 
EXEC sp_rename 'EMPPLOYEE.EMP_NAME',
'EMP_FIRSTNAME'
GO

ALTER TABLE EMPPLOYEE
ADD EMP_LASTNAME VARCHAR(46)
GO

UPDATE EMPPLOYEE
SET EMP_LASTNAME='SHETTY'
WHERE EMP_ID=103
GO
UPDATE EMPPLOYEE
SET EMP_LASTNAME='BHAT'
WHERE EMP_ID=104
GO
UPDATE EMPPLOYEE
SET EMP_LASTNAME='SHETTY'
WHERE EMP_ID=106
GO
UPDATE EMPPLOYEE
SET EMP_LASTNAME='BHAT'
WHERE EMP_ID=107
GO
UPDATE EMPPLOYEE
SET EMP_LASTNAME='SHETTY'
WHERE EMP_ID=108
GO
UPDATE EMPPLOYEE
SET EMP_LASTNAME='BHAT'
WHERE EMP_ID=109
GO


SELECT EMP_FIRSTNAME ,EMP_LASTNAME
FROM EMPPLOYEE
GO

SELECT EMP_FIRSTNAME+EMP_LASTNAME
FROM EMPPLOYEE
GO

ALTER TABLE EMPPLOYEE
ADD
EMP_DOB DATE NULL
GO

UPDATE EMPPLOYEE SET EMP_DOB='10-10-2024' WHERE EMP_ID=103;
UPDATE EMPPLOYEE SET EMP_DOB='09-05-2003' WHERE EMP_ID=104;
UPDATE EMPPLOYEE SET EMP_DOB='09-05-2003' WHERE EMP_ID=106;
UPDATE EMPPLOYEE SET EMP_DOB='09-05-2003' WHERE EMP_ID=107;
UPDATE EMPPLOYEE SET EMP_DOB='09-05-2003' WHERE EMP_ID=108;
UPDATE EMPPLOYEE SET EMP_DOB='09-05-2003' WHERE EMP_ID=109;

SELECT EMP_DOB,EMP_FIRSTNAME+EMP_LASTNAME
FROM EMPPLOYEE
GO

--FILTERING TABLES 
SELECT *
FROM EMPPLOYEE
WHERE D_ID IS NULL;
--ODER FROM WHERE SELECT
--FROM::FILTER TABLES
--WHERE ::FILTER ROWS
--SELECT;;FILTER COLUMNS

SELECT EMP_ID,EMP_FIRSTNAME+EMP_LASTNAME
FROM EMPPLOYEE
WHERE D_ID IS NOT NULL
GO

--DISPLAY ID AND NAME OF THOSE EMPLOYESS WHO WORKS AS HR

SELECT EMP_ID,EMP_FIRSTNAME+EMP_LASTNAME
FROM EMPPLOYEE
WHERE D_ID =(SELECT D_ID
FROM DEPARTMENT
WHERE D_NAME='HR')
GO

--DISPLAY NAMES OF EMPLOYEE WHOSE SLAARY GREATER THAN 3000
SELECT EMP_FIRSTNAME+EMP_LASTNAME
FROM EMPPLOYEE
WHERE EMP_SALARY>=3000;
GO

--DISPLAY LESS THAN 3000 SALARY 

SELECT EMP_ID, EMP_FIRSTNAME
FROM EMPPLOYEE
WHERE EMP_SALARY<=3000
GO

--DISPLAY ID AND NAME OF THOSE EMPLOYEE WHOSE SALARY 2000 AND 3000 AND 5000
SELECT EMP_ID,EMP_FIRSTNAME,EMP_SALARY
FROM EMPPLOYEE
WHERE EMP_SALARY IN (5000,6000,100)
GO

--CHECKING NULL IS CONSIDER IN COMPARISON OPERATOR 
--IT WILL NOT DISPLAY

UPDATE EMPPLOYEE SET EMP_SALARY=NULL WHERE EMP_ID=103;


--DISPLAY ID , NAME , SALARY OF EMPLOYEE WHOSE SALARY IS BETWEEN 4000 AND 7000


SELECT EMP_ID
FROM EMPPLOYEE
WHERE EMP_SALARY BETWEEN 4000 AND 7000;

--DISPLAY ID AND NAME OF EMP WHOSE NAMES START WITH R

SELECT EMP_ID,EMP_FIRSTNAME 
FROM EMPPLOYEE 
WHERE EMP_FIRSTNAME LIKE 'r%'
GO
--start with r and ends with sh
SELECT EMP_ID,EMP_FIRSTNAME 
FROM EMPPLOYEE 
WHERE EMP_FIRSTNAME LIKE 'r%ys'
GO
--ends with ya

--second letter is i
SELECT EMP_ID,EMP_FIRSTNAME 
FROM EMPPLOYEE 
WHERE EMP_FIRSTNAME LIKE '_i%'
GO
--second letter is a last letter i
SELECT EMP_ID,EMP_FIRSTNAME 
FROM EMPPLOYEE 
WHERE EMP_FIRSTNAME LIKE '_i%i'
GO

--two tables display
SELECT *
FROM EMPPLOYEE,DEPARTMENT
GO

SELECT EMPPLOYEE.*,DEPARTMENT.*
FROM EMPPLOYEE,DEPARTMENT
GO

SELECT EMP.EMPPLOYEE,DEPT.DEPARTMENT
FROM EMPPLOYEE EMP,DEPARTMENT DEPT
WHERE EMP.D_ID=DEPT.D_ID
GO

SELECT EMP.EMP_FIRSTNAME,DEPT.D_FIRSTNAME
FROM EMPPLOYEE EMP,DEPARTMENT DEPT
WHERE EMP.EMPLOYEE_D_ID<>DEPT.D_ID
GO

--DISPLAY THE MAXIMUM SALARY TAKEN BY THE EMPLOYEE IN THE COMPANY
--AGGREGATE FUNCTIONS
SELECT MAX(EMP_SALARY) AS 'MAXIMUM SALARY'
FROM EMPPLOYEE
GO

SELECT MIN(EMP_SALARY) AS 'MINIMUM SALARY'
FROM EMPPLOYEE
GO

SELECT COUNT(EMP_ID)
FROM EMPPLOYEE
GO

--DISPLAY AVERGE SALARY OF AN EMPLOYEE
SELECT AVG(EMP_SALARY) AS 'AVERAGE SALARY'
FROM EMPPLOYEE
GO

SELECT COUNT(D_ID)AS 'NUMBER OF EMP WORKING IN A DEPARTMENT '
FROM EMPPLOYEE
GO

SELECT EMP_FIRSTNAME 'EMPLOYEE NAME',
SUM(EMP_SALARY) AS 'SUM OF SALARY'
FROM EMPPLOYEE
GO

--DISPLAY DEPARTMENT NAME AND SUM OF SALARY ODF EACH DEPARTMENT 
SELECT D_ID 'DEPARTMENT_ID',SUM(EMP_SALARY) 'SUM OF SALARY'
FROM EMPPLOYEE
GROUP BY D_ID
GO

-- DISPLAY THE DEPARTMENT ID AND NUMBER OF EMPLOYEE WORKING IN EACH DEPARTMENT 

SELECT D_ID ,COUNT(EMP_FIRSTNAME) AS 'NUMBER OF EMPLOYEES'
FROM EMPPLOYEE
GROUP BY D_ID
GO

--DISPLAY DEPARTMENT NAME AND SUM OF SALARIES

SELECT DEPARTMENT.D_NAME AS 'DEPARTMENT NAME',
SUM(EMPPLOYEE.EMP_SALARY) AS 'TOTAL EXPENDITURE TOWARDS SALARY'
FROM EMPPLOYEE,DEPARTMENT
WHERE EMPPLOYEE.D_ID =DEPARTMENT.D_ID
GROUP BY DEPARTMENT.D_NAME;
GO

SELECT D_NAME AS 'DEPARTMENT NAME',
COUNT(EMP_ID) AS 'NUMBER OF EMPLOYES'
FROM EMPPLOYEE
GROUP BY D_NAME 
HAVING COUNT(EMP_ID)>2
GO

SELECT DEPT.D_NAME 'DEPARTMENT',COUNT(EMP.EMP_ID) 'NUMBER OF EMPLOYES'
FROM EMPPLOYEE EMP,DEPARTMENT DEPT
WHERE EMP.D_ID=DEPT.D_ID
GROUP BY DEPT.D_NAME
HAVING COUNT(EMP.EMP_ID)<=2;

SELECT EMP_ID,EMP_FIRSTNAME
FROM EMPPLOYEE
ORDER BY EMP_DOB
GO

SELECT EMP_ID,D_ID,EMP_FIRSTNAME
FROM EMPPLOYEE
ORDER BY D_ID,EMP_ID;

--DISPLAYING ID,DEPARTMENT ID,NAME BY SORTING AS PER DEPARTMENT IN ASCENDING ORDER AND THEN AS PER ID IN ASCENDING ORDER AND THEN AS PER ID ID IN DESCENDING
SELECT EMP_ID,D_ID,EMP_FIRSTNAME
FROM EMPPLOYEE
ORDER BY D_ID ASC,EMP_ID DESC;


SELECT DEPT.D_NAME AS 'DEPARTMENT',
EMP.EMP_DOB 'DOB',
EMP.EMP_FIRSTNAME 'NAME'
FROM DEPARTMENT DEPT
INNER JOIN EMPPLOYEE EMP
ON EMP.D_ID=DEPT.D_ID
ORDER BY DEPT.D_NAME,EMP.EMP_DOB
GO

CREATE TABLE PHONE(
	PHONE_ID			NUMERIC(4),
	PHONE_NUMBER		NUMERIC(10),
	PHONE_EMPLOYEE_ID	INTEGER NOT NULL
)
GO

ALTER TABLE PHONE
ALTER COLUMN PHONE_ID INT NOT NULL;

ALTER TABLE PHONE
ADD CONSTRAINT PK_PHONE_ID
PRIMARY KEY (PHONE_ID)
GO

ALTER TABLE PHONE
ADD CONSTRAINT FK_PHONE_EMPLOYEE_ID
FOREIGN KEY(PHONE_EMPLOYEE_ID) REFERENCES
EMPPLOYEE(EMP_ID)
ON DELETE CASCADE
GO

INSERT INTO PHONE VALUES (1, 1234, 101)
GO

INSERT INTO PHONE VALUES (2, 1243, 101)
GO

INSERT INTO PHONE VALUES (3, 1324, 102)
GO

INSERT INTO PHONE VALUES (4, 1343, 103)
GO

INSERT INTO PHONE VALUES (5, 1432, 104)
GO

INSERT INTO PHONE VALUES (6, 1423, 105)
GO

INSERT INTO PHONE VALUES (7, 2134, 104)
GO

CREATE OR ALTER FUNCTION calAvgSalByDeptId(@deptId int)
RETURNS float
	AS
		BEGIN
			DECLARE @avgSal float

			SELECT @avgSal = AVG(EMP_SALARY)
			FROM EMPPLOYEE
			WHERE EMPPLOYEE.D_ID=@deptId

			RETURN @avgSal
		END
-- database => Programmability => Functions
GO

SELECT dbo.calAvgSalByDeptId(1)
GO

CREATE OR ALTER FUNCTION getEmployeeList_IdAndName()
RETURNS TABLE
	AS
		RETURN
			SELECT EMP_ID, EMP_FIRSTNAME
			FROM EMPPLOYEE
GO

SELECT *
FROM dbo.getEmployeeList_IdAndName()
GO

CREATE PROCEDURE usp_getavgsal(@deptId int)
	AS
	BEGIN
		SELECT dbo.calAvgSalByDeptId(@deptId)
	END
GO

--drop a procedure
DROP PROCEDURE usp_getavgsal;
--creating a procedure or task 

CREATE PROCEDURE usp_getEmpployeeList
	AS
		BEGIN
			SELECT EMP_ID,
			EMP_FIRSTNAME,
			EMP_SALARY
		FROM EMPPLOYEE
	END

GO




CREATE PROCEDURE usp_addEmployee(
@empId INTEGER,
@empName VARCHAR(20),
@empSalary INTEGER,
@empDeptId NUMERIC(2),
@empLastName VARCHAR(46),
@empDob DATE)
AS
	BEGIN
		INSERT INTO EMPPLOYEE
		VALUES
		(@empId, @empName,@empSalary,@empDeptId,@empLastName,@empDob)
	END
EXEC dbo.usp_addEmployee
@empId=110,
@empName='JAMSHEER',
@empSalary=9000,
@empDeptId=4,
@empLastName='MUHAMMED',
@empDob='11-26-2002'
GO


EXEC sp_rename 'usp_getEmpployeeList','usp_getEmpList'

SELECT * FROM EMPPLOYEE;
-------------------------------------------------------------------------------------
CREATE OR ALTER FUNCTION getEmpDetailsByPhoneId(@phoneId int)
RETURNS TABLE
	AS
		RETURN
			SELECT	DEPT.D_NAME 'DEPARTMENT',
					EMP.EMP_FIRSTNAME 'NAME',
					PH.PHONE_NUMBER 'PHONE_NUMBER'
			FROM DEPARTMENT DEPT
			INNER JOIN EMPPLOYEE EMP
			ON DEPT.D_ID=EMP.D_ID
			INNER JOIN PHONE PH
			ON EMP.EMP_ID=PH.D_ID
			WHERE PH.PHONE_ID=@phoneId
GO




SELECT * FROM DEPARTMENT;

CREATE PROCEDURE usp_getEmpDetailsByPhoneId(@phoneId int)
	AS
		BEGIN
			SELECT * FROM dbo.getEmpDetailsByPhoneId(@phoneId)
		END
GO

EXEC dbo.usp_getEmpDetailsByPhoneId
@phoneId=2
GO

-- reading stored procedure
SELECT OBJECT_DEFINITION
		(OBJECT_ID(N'hdfc2.dbo.usp_getEmpDetailsByPhoneId'))
GO

-- declaring a column which has already got repeated values as a primary key
ALTER TABLE PHONE
ALTER COLUMN PHONE_ID NUMERIC(4) NOT NULL
GO

DELETE FROM PHONE
WHERE PHONE_EMPLOYEE_ID=108
GO

ALTER TABLE PHONE
ADD CONSTRAINT PK_PHONE_ID
PRIMARY KEY(PHONE_ID)
GO

-- attempting to insert row with correct values
INSERT INTO PHONE
VALUES
(8, 1342,108)
GO

-- attempting to insert row with WRONG values
INSERT INTO PHONE
VALUES
(8, 1324,108)
GO
-- Error: Violation of PRIMARY KEY constraint 'PK_PHONE_ID'. Cannot insert duplicate key in object 'dbo.PHONE'. The duplicate key value is (8).

-- handling the RTE

CREATE PROCEDURE usp_insertPhoneRecord(
	@phoneId numeric(2),
	@phoneNum numeric(10),
	@empId INTEGER
)
	AS
		BEGIN
			BEGIN TRY
				INSERT INTO PHONE
				VALUES
				(@phoneId, @phoneNum,@empId)
			END TRY
			BEGIN CATCH
				SELECT
					ERROR_NUMBER 'ERROR CODE',
					ERROR_MESSAGE 'DESCRIPTION',
					ERROR_SEVERITY 'SEVERITY'
			END CATCH
		END
GO

SELECT * FROM PHONE
GO




--update operation in stored procedure
ALTER PROCEDURE usp_getEmpployee
	AS
		BEGIN
		SELECT*
		FROM EMPPLOYEE VIEW
		END
GO
--RENAMING A STORED PROCEDURE
EXEC sp_rename 'usp_getEmpployeeList','usp_getEmpList'



create function details_from_phone(@phone_num int)
RETURNS TABLE
AS
	RETURN
		SELECT DEPT.DEPARTMENT_NAME,EMP.EMPLOYEE_FIRST_NAME,PH.PHONE_NUMBER
		FROM DEPARTMENT DEPT
		INNER JOIN EMPLOYEE EMP
		ON DEPT.DEPARTMENT_ID=EMP.EMPLOYEE_DEPARTMENT_ID
		INNER JOIN PHONE PH
		ON PH.PHONE_EMPLOYEE_ID=EMP.EMPLOYEE_ID
		WHERE PH.PHONE_NUMBER=@phone_num
 
 
CREATE PROCEDURE GETPHDETAIL(@PH INT)
AS
	BEGIN 
		SELECT *
		FROM DBO.details_from_phone(@PH)
	END

EXEC GETPHDETAIL 1234;

SELECT * FROM PHONE;

SELECT*
FROM EMPPLOYEE
GO

SELECT *
FROM DEPARTMENT;